<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>runtime.wakep (1 samples, 0.04%)</title><rect x="1132.1" y="165" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1135.07" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readLock (1 samples, 0.04%)</title><rect x="23.9" y="181" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="26.85" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).initHeapBits (1 samples, 0.04%)</title><rect x="1114.9" y="261" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1117.86" y="271.5" ></text>
</g>
<g >
<title>runtime.injectglist (1 samples, 0.04%)</title><rect x="1132.5" y="261" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1135.49" y="271.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (1 samples, 0.04%)</title><rect x="1132.1" y="117" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1135.07" y="127.5" ></text>
</g>
<g >
<title>net/http.persistConnWriter.Write (1 samples, 0.04%)</title><rect x="1116.5" y="293" width="0.5" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1119.54" y="303.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (90 samples, 3.20%)</title><rect x="1137.9" y="229" width="37.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1140.95" y="239.5" >run..</text>
</g>
<g >
<title>net.(*netFD).Read (2,602 samples, 92.56%)</title><rect x="20.9" y="197" width="1092.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="23.91" y="207.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.nanotime (3 samples, 0.11%)</title><rect x="1187.1" y="277" width="1.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1190.06" y="287.5" ></text>
</g>
<g >
<title>runtime.mapassign (1 samples, 0.04%)</title><rect x="1115.7" y="277" width="0.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1118.70" y="287.5" ></text>
</g>
<g >
<title>runtime.pidleget (10 samples, 0.36%)</title><rect x="1177.0" y="261" width="4.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1179.99" y="271.5" ></text>
</g>
<g >
<title>net.(*conn).Read (2,606 samples, 92.71%)</title><rect x="19.7" y="213" width="1093.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="22.65" y="223.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.11%)</title><rect x="1185.8" y="261" width="1.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1188.80" y="271.5" ></text>
</g>
<g >
<title>runtime.goready (1 samples, 0.04%)</title><rect x="1132.1" y="213" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1135.07" y="223.5" ></text>
</g>
<g >
<title>runtime.runOneTimer (1 samples, 0.04%)</title><rect x="1132.1" y="229" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1135.07" y="239.5" ></text>
</g>
<g >
<title>runtime.(*m).becomeSpinning (3 samples, 0.11%)</title><rect x="1119.5" y="277" width="1.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1122.48" y="287.5" ></text>
</g>
<g >
<title>runtime.(*timeHistogram).record (1 samples, 0.04%)</title><rect x="1124.1" y="245" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1127.09" y="255.5" ></text>
</g>
<g >
<title>runtime.runtimer (1 samples, 0.04%)</title><rect x="1132.1" y="245" width="0.4" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1135.07" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readUnlock (1 samples, 0.04%)</title><rect x="23.4" y="165" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="26.43" y="175.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.04%)</title><rect x="1132.1" y="181" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1135.07" y="191.5" ></text>
</g>
<g >
<title>runtime.typedmemmove (1 samples, 0.04%)</title><rect x="1116.1" y="277" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1119.12" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.04%)</title><rect x="1189.2" y="325" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1192.16" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (4 samples, 0.14%)</title><rect x="26.0" y="165" width="1.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="28.95" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="1189.6" y="325" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1192.58" y="335.5" ></text>
</g>
<g >
<title>runtime.ifaceeq (2 samples, 0.07%)</title><rect x="28.1" y="165" width="0.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="31.05" y="175.5" ></text>
</g>
<g >
<title>syscall.read (2,583 samples, 91.89%)</title><rect x="28.9" y="165" width="1084.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="31.89" y="175.5" >syscall.read</text>
</g>
<g >
<title>net/http.(*persistConn).readLoop (2 samples, 0.07%)</title><rect x="1115.7" y="325" width="0.8" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1118.70" y="335.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Int32).Add (1 samples, 0.04%)</title><rect x="1188.7" y="277" width="0.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1191.74" y="287.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (2,497 samples, 88.83%)</title><rect x="65.0" y="117" width="1048.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="67.99" y="127.5" >runtime/internal/syscall.Syscall6</text>
</g>
<g >
<title>internal/poll.runtime_pollWait (4 samples, 0.14%)</title><rect x="26.0" y="149" width="1.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="28.95" y="159.5" ></text>
</g>
<g >
<title>syscall.Write (1 samples, 0.04%)</title><rect x="1116.5" y="245" width="0.5" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1119.54" y="255.5" ></text>
</g>
<g >
<title>net/http.(*body).Read (2,620 samples, 93.21%)</title><rect x="15.0" y="293" width="1099.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="18.04" y="303.5" >net/http.(*body).Read</text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.04%)</title><rect x="1130.8" y="261" width="0.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1133.81" y="271.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.04%)</title><rect x="1132.1" y="133" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1135.07" y="143.5" ></text>
</g>
<g >
<title>syscall.Read (2,583 samples, 91.89%)</title><rect x="28.9" y="181" width="1084.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="31.89" y="191.5" >syscall.Read</text>
</g>
<g >
<title>net/http.(*body).readLocked (2,618 samples, 93.13%)</title><rect x="15.5" y="277" width="1098.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="18.46" y="287.5" >net/http.(*body).readLocked</text>
</g>
<g >
<title>runtime.traceEnabled (1 samples, 0.04%)</title><rect x="1188.3" y="277" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1191.32" y="287.5" ></text>
</g>
<g >
<title>runtime.netpollblock (1 samples, 0.04%)</title><rect x="26.8" y="133" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="29.79" y="143.5" ></text>
</g>
<g >
<title>syscall.Syscall (1 samples, 0.04%)</title><rect x="1116.5" y="213" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1119.54" y="223.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).next (4 samples, 0.14%)</title><rect x="1128.7" y="261" width="1.7" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1131.71" y="271.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (1 samples, 0.04%)</title><rect x="1115.3" y="309" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1118.28" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="1132.9" y="261" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1135.91" y="271.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="1124.1" y="261" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1127.09" y="271.5" ></text>
</g>
<g >
<title>runtime.save (1 samples, 0.04%)</title><rect x="31.0" y="101" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="33.99" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.04%)</title><rect x="1130.8" y="245" width="0.4" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="1133.81" y="255.5" ></text>
</g>
<g >
<title>all (2,811 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (22 samples, 0.78%)</title><rect x="54.5" y="133" width="9.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="57.50" y="143.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="57.4" y="117" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="60.44" y="127.5" ></text>
</g>
<g >
<title>runtime.pollInfo.closing (4 samples, 0.14%)</title><rect x="24.3" y="149" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="27.27" y="159.5" ></text>
</g>
<g >
<title>runtime.mcall (172 samples, 6.12%)</title><rect x="1117.0" y="325" width="72.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1119.96" y="335.5" >runtime...</text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (5 samples, 0.18%)</title><rect x="26.0" y="181" width="2.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="28.95" y="191.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (1 samples, 0.04%)</title><rect x="1116.5" y="261" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1119.54" y="271.5" ></text>
</g>
<g >
<title>runtime.checkIdleGCNoP (1 samples, 0.04%)</title><rect x="1131.7" y="261" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1134.65" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareRead (4 samples, 0.14%)</title><rect x="24.3" y="181" width="1.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="27.27" y="191.5" ></text>
</g>
<g >
<title>runtime.findRunnable (146 samples, 5.19%)</title><rect x="1124.5" y="277" width="61.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1127.51" y="287.5" >runtim..</text>
</g>
<g >
<title>net/http.(*bodyEOFSignal).Read (2,622 samples, 93.28%)</title><rect x="14.2" y="309" width="1100.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="17.20" y="319.5" >net/http.(*bodyEOFSignal).Read</text>
</g>
<g >
<title>runtime.netpollcheckerr (1 samples, 0.04%)</title><rect x="27.2" y="133" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="30.21" y="143.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (2,500 samples, 88.94%)</title><rect x="63.7" y="133" width="1049.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="66.73" y="143.5" >syscall.RawSyscall6</text>
</g>
<g >
<title>runtime.futex (1 samples, 0.04%)</title><rect x="1132.1" y="101" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1135.07" y="111.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (4 samples, 0.14%)</title><rect x="24.3" y="165" width="1.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="27.27" y="175.5" ></text>
</g>
<g >
<title>runtime.park_m (172 samples, 6.12%)</title><rect x="1117.0" y="309" width="72.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1119.96" y="319.5" >runtime...</text>
</g>
<g >
<title>internal/poll.ignoringEINTRIO (2 samples, 0.07%)</title><rect x="28.1" y="181" width="0.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="31.05" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (6 samples, 0.21%)</title><rect x="21.3" y="181" width="2.6" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="24.33" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gList).push (2 samples, 0.07%)</title><rect x="1136.3" y="245" width="0.8" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1139.27" y="255.5" ></text>
</g>
<g >
<title>net/http.(*persistConn).Read (2,611 samples, 92.89%)</title><rect x="17.6" y="229" width="1096.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="20.56" y="239.5" >net/http.(*persistConn).Read</text>
</g>
<g >
<title>internal/poll.convertErr (1 samples, 0.04%)</title><rect x="27.6" y="165" width="0.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="30.63" y="175.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Read (2,614 samples, 92.99%)</title><rect x="16.3" y="245" width="1097.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="19.30" y="255.5" >bufio.(*Reader).Read</text>
</g>
<g >
<title>net.wrapSyscallError (1 samples, 0.04%)</title><rect x="1113.2" y="197" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1116.18" y="207.5" ></text>
</g>
<g >
<title>net/http.(*persistConn).readLoop.func2 (1 samples, 0.04%)</title><rect x="1115.7" y="309" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1118.70" y="319.5" ></text>
</g>
<g >
<title>runtime.chanrecv (1 samples, 0.04%)</title><rect x="1116.1" y="293" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1119.12" y="303.5" ></text>
</g>
<g >
<title>runtime.goroutineReady.goready.func1 (1 samples, 0.04%)</title><rect x="1132.1" y="197" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1135.07" y="207.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_reacquired (1 samples, 0.04%)</title><rect x="63.3" y="101" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="66.31" y="111.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.04%)</title><rect x="1132.1" y="149" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1135.07" y="159.5" ></text>
</g>
<g >
<title>runtime.writeHeapBits.flush (1 samples, 0.04%)</title><rect x="1114.9" y="245" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1117.86" y="255.5" ></text>
</g>
<g >
<title>net.(*conn).Write (1 samples, 0.04%)</title><rect x="1116.5" y="277" width="0.5" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1119.54" y="287.5" ></text>
</g>
<g >
<title>runtime.pidleput (2 samples, 0.07%)</title><rect x="1181.2" y="261" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1184.18" y="271.5" ></text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.04%)</title><rect x="1131.2" y="261" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1134.23" y="271.5" ></text>
</g>
<g >
<title>runtime.reentersyscall (57 samples, 2.03%)</title><rect x="29.7" y="117" width="24.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="32.73" y="127.5" >r..</text>
</g>
<g >
<title>runtime.execute (9 samples, 0.32%)</title><rect x="1120.7" y="277" width="3.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1123.74" y="287.5" ></text>
</g>
<g >
<title>bufio.(*Reader).readErr (2 samples, 0.07%)</title><rect x="1113.6" y="245" width="0.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1116.60" y="255.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (1 samples, 0.04%)</title><rect x="1116.5" y="309" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1119.54" y="319.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (14 samples, 0.50%)</title><rect x="57.9" y="117" width="5.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="60.85" y="127.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (49 samples, 1.74%)</title><rect x="33.1" y="53" width="20.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="36.09" y="63.5" ></text>
</g>
<g >
<title>runtime.netpoll (101 samples, 3.59%)</title><rect x="1133.3" y="261" width="42.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1136.33" y="271.5" >run..</text>
</g>
<g >
<title>runtime.schedule (169 samples, 6.01%)</title><rect x="1118.2" y="293" width="71.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1121.22" y="303.5" >runtime...</text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (1 samples, 0.04%)</title><rect x="23.9" y="165" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="26.85" y="175.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint64).CompareAndSwap (1 samples, 0.04%)</title><rect x="1180.8" y="245" width="0.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1183.76" y="255.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (1 samples, 0.04%)</title><rect x="1116.5" y="197" width="0.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1119.54" y="207.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.EpollWait (92 samples, 3.27%)</title><rect x="1137.1" y="245" width="38.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1140.11" y="255.5" >run..</text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.04%)</title><rect x="1114.9" y="309" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1117.86" y="319.5" ></text>
</g>
<g >
<title>type:.hash.net/http.connectMethodKey (1 samples, 0.04%)</title><rect x="1115.7" y="261" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1118.70" y="271.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint64).Load (1 samples, 0.04%)</title><rect x="1185.4" y="261" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1188.38" y="271.5" ></text>
</g>
<g >
<title>net/http.(*persistConn).writeLoop (1 samples, 0.04%)</title><rect x="1116.5" y="325" width="0.5" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1119.54" y="335.5" ></text>
</g>
<g >
<title>runtime.checkTimers (2 samples, 0.07%)</title><rect x="1184.5" y="245" width="0.9" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1187.54" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (53 samples, 1.89%)</title><rect x="31.4" y="101" width="22.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="34.41" y="111.5" >r..</text>
</g>
<g >
<title>io.(*LimitedReader).Read (2,617 samples, 93.10%)</title><rect x="15.9" y="261" width="1098.5" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="18.88" y="271.5" >io.(*LimitedReader).Read</text>
</g>
<g >
<title>runtime/internal/atomic.(*Bool).Load (2 samples, 0.07%)</title><rect x="53.7" y="117" width="0.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="56.66" y="127.5" ></text>
</g>
<g >
<title>runtime.chanrecv1 (1 samples, 0.04%)</title><rect x="1116.1" y="309" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1119.12" y="319.5" ></text>
</g>
<g >
<title>runtime.stealWork (8 samples, 0.28%)</title><rect x="1182.0" y="261" width="3.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1185.02" y="271.5" ></text>
</g>
<g >
<title>runtime.pMask.read (3 samples, 0.11%)</title><rect x="1175.7" y="261" width="1.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1178.73" y="271.5" ></text>
</g>
<g >
<title>runtime.(*randomOrder).start (1 samples, 0.04%)</title><rect x="1130.4" y="261" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1133.39" y="271.5" ></text>
</g>
<g >
<title>syscall.Syscall (2,582 samples, 91.85%)</title><rect x="29.3" y="149" width="1083.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="32.31" y="159.5" >syscall.Syscall</text>
</g>
<g >
<title>aeshashbody (1 samples, 0.04%)</title><rect x="1115.7" y="245" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1118.70" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (1 samples, 0.04%)</title><rect x="1114.9" y="277" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1117.86" y="287.5" ></text>
</g>
<g >
<title>runtime.checkTimers (1 samples, 0.04%)</title><rect x="1132.1" y="261" width="0.4" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="1135.07" y="271.5" ></text>
</g>
<g >
<title>runtime.entersyscall_sysmon (50 samples, 1.78%)</title><rect x="32.7" y="85" width="21.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="35.67" y="95.5" ></text>
</g>
<g >
<title>runtime.entersyscall (60 samples, 2.13%)</title><rect x="29.3" y="133" width="25.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="32.31" y="143.5" >r..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.04%)</title><rect x="1114.9" y="293" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1117.86" y="303.5" ></text>
</g>
<g >
<title>runtime.futex (49 samples, 1.74%)</title><rect x="33.1" y="37" width="20.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="36.09" y="47.5" ></text>
</g>
<g >
<title>syscall.write (1 samples, 0.04%)</title><rect x="1116.5" y="229" width="0.5" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1119.54" y="239.5" ></text>
</g>
<g >
<title>net/http.(*Transport).tryPutIdleConn (1 samples, 0.04%)</title><rect x="1115.7" y="293" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1118.70" y="303.5" ></text>
</g>
<g >
<title>main.bench (2,634 samples, 93.70%)</title><rect x="10.0" y="325" width="1105.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >main.bench</text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (1 samples, 0.04%)</title><rect x="1116.5" y="181" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1119.54" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.11%)</title><rect x="1185.8" y="277" width="1.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1188.80" y="287.5" ></text>
</g>
<g >
<title>runtime.netpollblockcommit (3 samples, 0.11%)</title><rect x="1117.0" y="293" width="1.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1119.96" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (50 samples, 1.78%)</title><rect x="32.7" y="69" width="21.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="35.67" y="79.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (1 samples, 0.04%)</title><rect x="1114.4" y="277" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1117.44" y="287.5" ></text>
</g>
</g>
</svg>
